data.frame(variable = var, table(data[[var]], data[["annee_psychiatrie_grp"]]))
pivot_wider(data.frame(variable = var, table(data[[var]], data[["annee_psychiatrie_grp"]])), names_from = "Var2", values_from = "Freq")
summary= c()
for (var in colnames(data[- c(1, which(colnames(data)=="7_combien_dannees_dexperience_avez_vous_en"), ncol(data))])) {
test=chisq.test(table(data[["annee_psychiatrie_grp"]], data[[var]]))
summary=rbind(summary, data.frame(variable = var, table(data[[var]], data[["annee_psychiatrie_grp"]])))
ifelse(test$p.value<0.05, paste0("Le test du chi-deux montre avec significativité que les variables **", "Peu expérimenté en psychiatrie" , "** et **", var, "** sont liées, avec une p-value de ", round(test$p.value, 4), "."), "")
}
summary
summary = pivot_wider(summary, names_from = "Var2", values_from = "Freq")
summary
variables
which(variables$type=="text"
)
variables$variable[c(4,15,21,22,34,36,39,42)]
data[-variables$variable[c(4,15,21,22,34,36,39,42)]]
data[-(variables$variable[c(4,15,21,22,34,36,39,42)])]
data[-c(variables$variable[c(4,15,21,22,34,36,39,42)])]
data[-c(variables$variable[4])]
data[-variables$variable[4])]
data[-variables$variable[4]]
variables$variable[4]
data[[-variables$variable[4]]]
data[[variables$variable[4]]]
data[-[variables$variable[4]]]
which(colnames(data) %in% variables$variable[which(variables$type=="text")]
)
which(colnames(data) %in% variables$variable[which(variables$type=="text")])
which(variables$type=="text")
data[-which(colnames(data) %in% variables$variable[which(variables$type=="text")])]
colnames(data[-which(colnames(data) %in% variables$variable[which(variables$type=="text")])])
summary= c()
for (var in colnames(data[- c(1, which(colnames(data) %in% variables$variable[which(variables$type=="text")]), which(colnames(data)=="7_combien_dannees_dexperience_avez_vous_en"), ncol(data))])) {
test=chisq.test(table(data[["annee_psychiatrie_grp"]], data[[var]]))
summary=rbind(summary, data.frame(variable = var, table(data[[var]], data[["annee_psychiatrie_grp"]])))
ifelse(test$p.value<0.05, paste0("Le test du chi-deux montre avec significativité que les variables **", "Peu expérimenté en psychiatrie" , "** et **", var, "** sont liées, avec une p-value de ", round(test$p.value, 4), "."), "")
}
test=chisq.test(table(data[["annee_psychiatrie_grp"]], data[[var]]))
test
colnames(data)
data = mutate(data, annee_travail_grp = ifelse(data$`6_annee_travail` < 5, "Peu d'ancienneté", "Plus d'ancienneté"))
summary= c()
for (var in colnames(data[- c(1, which(colnames(data) %in% variables$variable[which(variables$type=="text")]), which(colnames(data)=="6_annee_travail"), ncol(data))])) {
test=chisq.test(table(data[["annee_travail_grp"]], data[[var]]))
summary=rbind(summary, data.frame(variable = var, table(data[[var]], data[["annee_travail_grp"]])))
cat(ifelse(test$p.value<0.05, paste0("Le test du chi-deux montre avec significativité que les variables **", "6_annee_travail" , "** et **", var, "** sont liées, avec une p-value de **", round(test$p.value, 4), "**.\n\n"), ""))
}
summary = pivot_wider(summary, names_from = "Var2", values_from = "Freq")
print(kable(summary)  %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed")))
colnames(data)
data$`8_interet_nutrition`
colnames(data)[["Var1"]]
colnames(data)[2]
colnames(data)
colnames(summary)
var1=data$`31_capacite_animation_atelier`
var2=data$`32_souhait_formation`
test=chisq.test(table(data[[var1]], data[[var2]]))
var1
var2
test=chisq.test(table(data[[var1]], data[[var2]]))
table(data[[var1]], data[[var2]])
table(data[[var1]], data[[var2]])
data[[var1]]
var1="`31_capacite_animation_atelier`"
var2="`32_souhait_formation`"
test=chisq.test(table(data[[var1]], data[[var2]]))
data[[var1]]
var1="`31_capacite_animation_atelier`"
var1="31_capacite_animation_atelier"
var2="32_souhait_formation"
test=chisq.test(table(data[[var1]], data[[var2]]))
print(kable(table(data[[var1]], data[[var2]])))
cat(paste0("**Valeur du chi-deux :** ", round(test$statistic,4)))
cat("\n\n")
cat(paste0("**p-value :** ", round(test$p.value, 4)))
# Charger les bibliothèques nécessaires
library(shiny)
library(ggplot2)
# Définir l'interface utilisateur
ui <- fluidPage(
titlePanel("Roue Aléatoire Shiny"),
sidebarLayout(
sidebarPanel(
actionButton("spin", "Tourner la roue")
),
mainPanel(
plotOutput("wheelPlot")
)
)
)
# Définir le serveur
server <- function(input, output) {
observeEvent(input$spin, {
# Générer des couleurs aléatoires
colors <- sample(colors(), 10)
# Créer un dataframe pour les segments de la roue
wheel_data <- data.frame(
segment = factor(1:10),
value = rep(1, 10),
color = colors
)
# Créer le graphique de la roue
output$wheelPlot <- renderPlot({
ggplot(wheel_data, aes(x = "", y = value, fill = color)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
scale_fill_manual(values = colors) +
theme_void() +
theme(legend.position = "none")
})
})
}
# Lancer l'application Shiny
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
# Liste des éléments à inclure dans la roue
elements <- c("Option 1", "Option 2", "Option 3", "Option 4", "Option 5")
# UI
ui <- fluidPage(
titlePanel("Roue Aléatoire"),
sidebarLayout(
sidebarPanel(
actionButton("spin", "Tourner la Roue")
),
mainPanel(
plotlyOutput("wheelPlot"),
textOutput("selectedElement")
)
)
)
# Serveur
server <- function(input, output, session) {
observeEvent(input$spin, {
selected <- sample(elements, 1)
# Créer les données pour le graphique
data <- data.frame(
labels = elements,
values = rep(1, length(elements))
)
# Créer le graphique de la roue
p <- plot_ly(data, labels = ~labels, values = ~values, type = 'pie', textinfo = 'label+percent',
insidetextorientation = 'radial', marker = list(colors = rainbow(length(elements))))
output$wheelPlot <- renderPlotly(p)
output$selectedElement <- renderText(paste("Élément sélectionné :", selected))
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
runApp('Perso/Livres/library/library.R')
# ==============================================================================
#                            Chargement des packages
# ==============================================================================
library(shiny)
library(shinydashboard)
library(shinycssloaders) #Animations de chargement
library(shinymanager)
library(DT)
library(reticulate)
library(rstudioapi)
# ==============================================================================
#                            Définition des chemins
# ==============================================================================
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# ==============================================================================
#                              Lecture des données
# ==============================================================================
# ==============================================================================
#                                  Application
# ==============================================================================
ui <- dashboardPage(
skin = "yellow",
dashboardHeader(title = "Library"),
dashboardSidebar(
sidebarMenu(
menuItem("Extraction d'un utilisateur", tabName = "extract_posts_com_user", icon = icon("user")),
menuItem("Posts d'un forum", tabName = "extract_posts_of_forum", icon = icon("search")),
menuItem("Commentaires d'un post", tabName = "extract_com_of_post", icon = icon("search")),
menuItem("Forums par mots-clefs", tabName = "extract_forum_by_keywords", icon = icon("earth-europe")),
menuItem("Posts par mots-clefs", tabName = "extract_posts_by_keywords", icon = icon("key")),
menuItem("Information d'un post", tabName = "extract_info_post", icon = icon("blog")),
menuItem("Information d'un commentaire", tabName = "extract_info_com", icon = icon("comment"))
)
),
dashboardBody()
)
server <- function(input, output) {}
shinyApp(ui, server)
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
?read_xlsx
runApp('library.R')
runApp('library.R')
runApp('library.R')
?DTOutput
runApp('library.R')
runApp('library.R')
?input
?Input
?selectInput
?selectizeInput
?SelectInput
?selectInput
?fileInput
library(shiny)
library(shinydashboard)
library(shinycssloaders) #Animations de chargement
library(shinymanager)
library(DT)
library(reticulate)
library(rstudioapi)
library(openxlsx)
library(readxl)
?fileInput
?selectInput
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
?DTOutput
runApp('library.R')
?fileInput
runApp('library.R')
?dashboardPage
runApp('library.R')
runApp('library.R')
?req
?select
runApp('library.R')
?arrange
library(dplyr)
runApp('library.R')
runApp('library.R')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data=read.xlsx("library.xlsx")
data
data=select(data, "Titre", "Auteur", "Date")
data
data=arrange(data, "Date")
data
runApp('library.R')
data=arrange(data, Date)
data
input
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "Library"),
dashboardSidebar(
sidebarMenu(
menuItem("Bibliothèque", tabName = "bibliotheque", icon = icon("user")),
menuItem("Rangement", tabName = "rangement", icon = icon("user")),
menuItem("Statistiques", tabName = "statistiques", icon = icon("search")),
menuItem("Spinner Wheel", tabName = "spinner_wheel", icon = icon("search"))
)
),
dashboardBody(
tabItems(
# ------------------------------------------------------------------------------
#                                    Page 1
# ------------------------------------------------------------------------------
tabItem(
tabName = "bibliotheque",
fluidRow(
box(
title = "Importer la bibliothèque",
status = "primary",
width = 12,
solidHeader = TRUE,
fluidRow(
column(12,
fileInput("library_csv", "Choisissez votre bibliothèque", accept = c(".xlsx", ".csv"), buttonLabel = "Parcourir", placeholder = "Sélectionner une bibliothèque"),
br(), br(),
DTOutput("table_data", width = "100%")
)
)
)
)
),
# ------------------------------------------------------------------------------
#                                    Page 2
# ------------------------------------------------------------------------------
tabItem(
tabName = "rangement",
fluidRow(
box(
title = "Ranger les livres dans la bibliothèque",
status = "primary",
width = 12,
solidHeader = TRUE,
fluidRow(
column(4,
selectInput(inputId = "tri", label = "Trier par", choices = c("Auteur", "Date", "Genre", "Titre"), selected = "Date")),
column(4,
selectInput(inputId = "genres", label = "Genre", choices = genres, selected = "Littérature")),
column(4,
selectInput(inputId = "tri_genres", label = "Trier le genre par", choices = c("Auteur", "Date", "Titre"), selected = "Date")),
br(), br(),
DTOutput("table_tri")
)
),
)
),
# ------------------------------------------------------------------------------
#                                    Page 3
# ------------------------------------------------------------------------------
tabItem(
tabName = "statistiques",
fluidRow(
box(
title = "Statistiques",
status = "primary",
width = 12,
solidHeader = TRUE
)
)
),
# ------------------------------------------------------------------------------
#                                    Page 4
# ------------------------------------------------------------------------------
tabItem(
tabName = "spinner_wheel"
)
)
)
)
genres=c("Album jeunesse", "Art", "Bande dessinée", "Langue", "Littérature", "Manga", "Nouvelle", "Philosophie", "Poésie", "Récit", "Religion", "Roman", "Sciences", "Sport", "Théâtre")
# ==============================================================================
# ------------------------------------------------------------------------------
#                                  Application
# ------------------------------------------------------------------------------
# ==============================================================================
# ==============================================================================
#                              Interface utilisateur
# ==============================================================================
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "Library"),
dashboardSidebar(
sidebarMenu(
menuItem("Bibliothèque", tabName = "bibliotheque", icon = icon("user")),
menuItem("Rangement", tabName = "rangement", icon = icon("user")),
menuItem("Statistiques", tabName = "statistiques", icon = icon("search")),
menuItem("Spinner Wheel", tabName = "spinner_wheel", icon = icon("search"))
)
),
dashboardBody(
tabItems(
# ------------------------------------------------------------------------------
#                                    Page 1
# ------------------------------------------------------------------------------
tabItem(
tabName = "bibliotheque",
fluidRow(
box(
title = "Importer la bibliothèque",
status = "primary",
width = 12,
solidHeader = TRUE,
fluidRow(
column(12,
fileInput("library_csv", "Choisissez votre bibliothèque", accept = c(".xlsx", ".csv"), buttonLabel = "Parcourir", placeholder = "Sélectionner une bibliothèque"),
br(), br(),
DTOutput("table_data", width = "100%")
)
)
)
)
),
# ------------------------------------------------------------------------------
#                                    Page 2
# ------------------------------------------------------------------------------
tabItem(
tabName = "rangement",
fluidRow(
box(
title = "Ranger les livres dans la bibliothèque",
status = "primary",
width = 12,
solidHeader = TRUE,
fluidRow(
column(4,
selectInput(inputId = "tri", label = "Trier par", choices = c("Auteur", "Date", "Genre", "Titre"), selected = "Date")),
column(4,
selectInput(inputId = "genres", label = "Genre", choices = genres, selected = "Littérature")),
column(4,
selectInput(inputId = "tri_genres", label = "Trier le genre par", choices = c("Auteur", "Date", "Titre"), selected = "Date")),
br(), br(),
DTOutput("table_tri")
)
),
)
),
# ------------------------------------------------------------------------------
#                                    Page 3
# ------------------------------------------------------------------------------
tabItem(
tabName = "statistiques",
fluidRow(
box(
title = "Statistiques",
status = "primary",
width = 12,
solidHeader = TRUE
)
)
),
# ------------------------------------------------------------------------------
#                                    Page 4
# ------------------------------------------------------------------------------
tabItem(
tabName = "spinner_wheel"
)
)
)
)
ui
skin
skin = "blue"
dashboardSidebar(
sidebarMenu(
menuItem("Bibliothèque", tabName = "bibliotheque", icon = icon("user")),
menuItem("Rangement", tabName = "rangement", icon = icon("user")),
menuItem("Statistiques", tabName = "statistiques", icon = icon("search")),
menuItem("Spinner Wheel", tabName = "spinner_wheel", icon = icon("search"))
)
)
"Date"
unliste("Date")
get("Date")
runApp('library.R')
?sort
runApp('library.R')
?order
runApp('library.R')
runApp('library.R')
library(rlang)
runApp('library.R')
?datatable
class(input$tri)
runApp('library.R')
dashboardSidebar()
?dashboardSidebar
runApp('library.R')
?sidebarMenu
?dashboardSidebar
runApp('library.R')
runApp('library.R')
?datatable
runApp('library.R')
runApp('library.R')
data
genre = "Art"
data=read.xlsx("library.xlsx")
data
where(data, Genre = genre)
?where
data[data$Genre==genre,]
runApp('library.R')
data
data[data$Genre==genre,]
?filter
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
?h3
library(htmltools)
runApp('library.R')
runApp('library.R')
runApp('library.R')
View(data)
View(data)
runApp('library.R')
nrow(data[data$Livre.principal=="Oui",])
?renerText
?renderText
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
runApp('library.R')
data_library=data
data_library2=data_library[data_library$Livre.principal == "Oui",]
runApp('library.R')
runApp('library.R')
runApp('library.R')
filter(data, "Livre.principal" == "Oui")
filter(data, Livre.principal == "Oui")
runApp('library.R')
?box
runApp('library.R')
runApp('library.R')
?renderText
